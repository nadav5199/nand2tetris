// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
//// Replace this comment with your code.
    Not16(in=x, out=notx);                          // negate x
    Not16(in=y, out=noty);                          // negate x
    Not16(in=false, out=notzero);                   // constant !0

    Mux4Way16(a=x, b=notx, c=false, d=notzero,
        sel[0]=nx, sel[1]=zx, out=zeronotx);        // x/notx/false/notzero based on zx and nx
    Mux4Way16(a=y, b=noty, c=false, d=notzero,
        sel[0]=ny, sel[1]=zy, out=zeronoty);        // y/noty/false/notzero based on zy and ny

    And16(a=zeronotx, b=zeronoty, out=xandy);       // zeronotx AND zeronoty -> xandy
    Add16(a=zeronotx, b=zeronoty, out=xplusy);      // zeronotx + zeronoty -> xplusy

    Mux16(a=xandy, b=xplusy, sel=f, out=andplus);   // xandy/xplusy MUX f -> andplus
    Not16(in=andplus, out=notandplus);              // NOT andor -> notandor
    Mux16(a=andplus, b=notandplus, sel=no, out=out,
        out[0..7]=andpluslower,
        out[8..15]=andplusupper,
        out[15]=ng);                                // andplus/notandplus MUX no -> out
                                                    // also split the output bus to determine zr

    Or8Way(in=andpluslower, out=zrlower);             // are any of the lower bits 1?
    Or8Way(in=andplusupper, out=zrupper);             // are any of the upper bits 1?
    Or(a=zrlower, b=zrupper, out=notzr);            // are any of the bits 1?
    Not(in=notzr, out=zr); 


}